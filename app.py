# Attendance Analyzer — Made by Lovekesh Poonia 💻

import pandas as pd
import os 
from datetime import datetime, date
from openai import AzureOpenAI
from dotenv import load_dotenv
load_dotenv()

try:
    att_data = pd.read_csv("input.csv")
    print("✅ input.csv loaded.")
except:
    print("❌ File not found. Please place 'input.csv' in the same folder as this script.")
    exit()

if "Name" not in att_data.columns or "Check-In Time" not in att_data.columns:
    print("❌ Required columns missing! Ensure 'Name' and 'Check-In Time' are present.")
    exit()

def check_time(t):
    try:
        return datetime.strptime(t, "%I:%M %p")
    except:
        return None  

def get_status(time_obj):
    if time_obj is None:
        return "Absent"
    elif time_obj <= datetime.strptime("09:00 AM", "%I:%M %p"):
        return "Present"
    elif time_obj <= datetime.strptime("09:15 AM", "%I:%M %p"):
        return "Late"
    else:
        return "Absent"

att_data["ParsedTime"] = att_data["Check-In Time"].apply(check_time)
att_data["Status"] = att_data["ParsedTime"].apply(get_status)
att_data["Date"] = date.today().strftime("%Y-%m-%d")
att_data.drop("ParsedTime", axis=1, inplace=True)

output_file = "Output.csv"
att_data.to_csv(output_file, index=False)
print(f"✅ Structured attendance saved as '{output_file}'")

client = AzureOpenAI(
    api_key=os.getenv("AZURE_OPENAI_KEY"),
    api_version="2024-12-01-preview",
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")
)

present = att_data[att_data["Status"] == "Present"]
late = att_data[att_data["Status"] == "Late"]
absent = att_data[att_data["Status"] == "Absent"]

summary_prompt = f"""
Today’s attendance at a glance:

Total: {len(att_data)}
Present: {len(present)}
Late: {len(late)}
Absent: {len(absent)}

Latecomers: {', '.join(late['Name'].tolist()) or 'None'}
Absent: {', '.join(absent['Name'].tolist()) or 'None'}

Write a short 2-3 line summary update that sounds friendly and clear.
"""

try:
    response = client.chat.completions.create(
        model="mindcraft-gpt4o",
        messages=[{"role": "user", "content": summary_prompt}],
        temperature=0.5,
        max_tokens=100
    )

    summary = response.choices[0].message.content
    print("\n📝 Daily Attendance Summary:\n")
    print(summary)

    with open("summary.txt", "w",encoding="utf-8") as f:
        f.write(summary + "\n\n— Generated by Lovekesh’s Attendance Bot\n Date: " + date.today().strftime("%Y-%m-%d") + "\n📂 File: summary.txt")

except Exception as e:
    print("⚠️ GPT-4 summary failed:", e)

print("\n📢 Attendance processed by Lovekesh’s AI Agent ")
print("📅 Date:", date.today().strftime("%Y-%m-%d"))
print("📂 File:", output_file)